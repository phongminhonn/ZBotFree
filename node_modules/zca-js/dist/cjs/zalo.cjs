'use strict';

var getOwnId = require('./apis/getOwnId.cjs');
var listen = require('./apis/listen.cjs');
var login = require('./apis/login.cjs');
var context = require('./context.cjs');
var utils = require('./utils.cjs');
var addReaction = require('./apis/addReaction.cjs');
var addUserToGroup = require('./apis/addUserToGroup.cjs');
var changeGroupAvatar = require('./apis/changeGroupAvatar.cjs');
var changeGroupName = require('./apis/changeGroupName.cjs');
var createGroup = require('./apis/createGroup.cjs');
var fetchAccountInfo = require('./apis/fetchAccountInfo.cjs');
var findUser = require('./apis/findUser.cjs');
var getAllFriends = require('./apis/getAllFriends.cjs');
var getAllGroups = require('./apis/getAllGroups.cjs');
var getGroupInfo = require('./apis/getGroupInfo.cjs');
var getStickers = require('./apis/getStickers.cjs');
var getStickersDetail = require('./apis/getStickersDetail.cjs');
var removeUserFromGroup = require('./apis/removeUserFromGroup.cjs');
var sendSticker = require('./apis/sendSticker.cjs');
var undo = require('./apis/undo.cjs');
var uploadAttachment = require('./apis/uploadAttachment.cjs');
var update = require('./update.cjs');
var sendMessage = require('./apis/sendMessage.cjs');
var getCookie = require('./apis/getCookie.cjs');
var deleteMessage = require('./apis/deleteMessage.cjs');
var getUserInfo = require('./apis/getUserInfo.cjs');

class Zalo {
    constructor(credentials, options) {
        this.enableEncryptParam = true;
        this.validateParams(credentials);
        context.appContext.imei = credentials.imei;
        context.appContext.cookie = this.parseCookies(credentials.cookie);
        context.appContext.userAgent = credentials.userAgent;
        context.appContext.language = credentials.language || "vi";
        context.appContext.secretKey = null;
        if (options)
            Object.assign(context.appContext.options, options);
    }
    parseCookies(cookie) {
        if (typeof cookie === "string")
            return cookie;
        const cookieString = cookie.cookies.map((c) => `${c.name}=${c.value}`).join("; ");
        return cookieString;
    }
    validateParams(credentials) {
        if (!credentials.imei || !credentials.cookie || !credentials.userAgent) {
            throw new Error("Missing required params");
        }
    }
    async login() {
        await update.checkUpdate();
        const loginData = await login.login(this.enableEncryptParam);
        const serverInfo = await login.getServerInfo(this.enableEncryptParam);
        if (!loginData || !serverInfo)
            throw new Error("Failed to login");
        context.appContext.secretKey = loginData.data.zpw_enk;
        context.appContext.uid = loginData.data.uid;
        // Zalo currently responds with setttings instead of settings
        // they might fix this in the future, so we should have a fallback just in case
        context.appContext.settings = serverInfo.setttings || serverInfo.settings;
        context.appContext.extraVer = serverInfo.extra_ver;
        utils.logger.info("Logged in as", loginData.data.uid);
        return new API(context.appContext.secretKey, loginData.data.zpw_service_map_v3, utils.makeURL(`${loginData.data.zpw_ws[0]}`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
            t: Date.now(),
        }));
    }
}
class API {
    constructor(secretKey, zpwServiceMap, wsUrl) {
        this.secretKey = secretKey;
        this.zpwServiceMap = zpwServiceMap;
        this.listener = new listen.Listener(wsUrl);
        this.addReaction = addReaction.addReactionFactory(utils.makeURL(`${zpwServiceMap.reaction[0]}/api/message/reaction`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.getOwnId = getOwnId.getOwnId;
        this.getStickers = getStickers.getStickersFactory(utils.makeURL(`${zpwServiceMap.sticker}/api/message/sticker`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.getStickersDetail = getStickersDetail.getStickersDetailFactory(utils.makeURL(`${zpwServiceMap.sticker}/api/message/sticker`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.sendSticker = sendSticker.sendStickerFactory(this);
        this.findUser = findUser.findUserFactory(utils.makeURL(`${zpwServiceMap.friend[0]}/api/friend/profile/get`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.uploadAttachment = uploadAttachment.uploadAttachmentFactory(`${zpwServiceMap.file[0]}/api`);
        this.undo = undo.undoFactory(this);
        this.getGroupInfo = getGroupInfo.getGroupInfoFactory(utils.makeURL(`${zpwServiceMap.group[0]}/api/group/getmg-v2`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.createGroup = createGroup.createGroupFactory(utils.makeURL(`${zpwServiceMap.group[0]}/api/group/create/v2`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }), this);
        this.changeGroupAvatar = changeGroupAvatar.changeGroupAvatarFactory(utils.makeURL(`${zpwServiceMap.file[0]}/api/group/upavatar`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.removeUserFromGroup = removeUserFromGroup.removeUserFromGroupFactory(utils.makeURL(`${zpwServiceMap.group[0]}/api/group/kickout`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.addUserToGroup = addUserToGroup.addUserToGroupFactory(utils.makeURL(`${zpwServiceMap.group[0]}/api/group/invite/v2`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.changeGroupName = changeGroupName.changeGroupNameFactory(utils.makeURL(`${zpwServiceMap.group[0]}/api/group/updateinfo`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.sendMessage = sendMessage.sendMessageFactory(this);
        this.getCookie = getCookie.getCookieFactory();
        this.deleteMessage = deleteMessage.removeMessageFactory(this);
        this.fetchAccountInfo = fetchAccountInfo.fetchAccountInfoFactory(utils.makeURL(`${zpwServiceMap.profile[0]}/api/social/profile/me-v2`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.getAllFriends = getAllFriends.getAllFriendsFactory(utils.makeURL(`${zpwServiceMap.profile[0]}/api/social/friend/getfriends`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.getAllGroups = getAllGroups.getAllGroupsFactory(utils.makeURL(`${zpwServiceMap.group_poll[0]}/api/group/getlg/v4`, {
            zpw_ver: context.appContext.API_VERSION,
            zpw_type: context.appContext.API_TYPE,
        }));
        this.getUserInfo = getUserInfo.getUserInfoFactory(this);
    }
}

exports.API = API;
exports.Zalo = Zalo;
