'use strict';

var context = require('../context.cjs');

exports.GroupEventType = void 0;
(function (GroupEventType) {
    GroupEventType[GroupEventType["JOIN_REQUEST"] = 0] = "JOIN_REQUEST";
    GroupEventType[GroupEventType["JOIN"] = 1] = "JOIN";
    GroupEventType[GroupEventType["LEAVE"] = 2] = "LEAVE";
    GroupEventType[GroupEventType["REMOVE_MEMBER"] = 3] = "REMOVE_MEMBER";
    GroupEventType[GroupEventType["BLOCK_MEMBER"] = 4] = "BLOCK_MEMBER";
    GroupEventType[GroupEventType["UPDATE_SETTING"] = 5] = "UPDATE_SETTING";
    GroupEventType[GroupEventType["UPDATE"] = 6] = "UPDATE";
    GroupEventType[GroupEventType["NEW_LINK"] = 7] = "NEW_LINK";
    GroupEventType[GroupEventType["ADD_ADMIN"] = 8] = "ADD_ADMIN";
    GroupEventType[GroupEventType["REMOVE_ADMIN"] = 9] = "REMOVE_ADMIN";
    GroupEventType[GroupEventType["NEW_PIN_TOPIC"] = 10] = "NEW_PIN_TOPIC";
    GroupEventType[GroupEventType["UPDATE_TOPIC"] = 11] = "UPDATE_TOPIC";
    GroupEventType[GroupEventType["UPDATE_BOARD"] = 12] = "UPDATE_BOARD";
    GroupEventType[GroupEventType["REORDER_PIN_TOPIC"] = 13] = "REORDER_PIN_TOPIC";
    GroupEventType[GroupEventType["UNPIN_TOPIC"] = 14] = "UNPIN_TOPIC";
    GroupEventType[GroupEventType["REMOVE_TOPIC"] = 15] = "REMOVE_TOPIC";
    GroupEventType[GroupEventType["UNKNOWN"] = 16] = "UNKNOWN";
})(exports.GroupEventType || (exports.GroupEventType = {}));
function initializeGroupEvent(data, type) {
    const threadId = data.groupId;
    if (type == exports.GroupEventType.JOIN_REQUEST) {
        return { type, data: data, threadId, isSelf: false };
    }
    else if (type == exports.GroupEventType.NEW_PIN_TOPIC || type == exports.GroupEventType.UNPIN_TOPIC) {
        return {
            type,
            data: data,
            threadId,
            isSelf: data.actorId == context.appContext.uid,
        };
    }
    else if (type == exports.GroupEventType.REORDER_PIN_TOPIC) {
        return {
            type,
            data: data,
            threadId,
            isSelf: data.actorId == context.appContext.uid,
        };
    }
    else {
        const baseData = data;
        return {
            type,
            data: baseData,
            threadId,
            isSelf: baseData.updateMembers.some((member) => member.id == context.appContext.uid) ||
                baseData.sourceId == context.appContext.uid,
        };
    }
}

exports.initializeGroupEvent = initializeGroupEvent;
