'use strict';

var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var utils = require('../utils.cjs');

function getStickersDetailFactory(serviceURL) {
    /**
     * Get stickers by keyword
     *
     * @param keyword Keyword to search for
     */
    return async function getStickersDetail(stickerIds) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        if (!stickerIds)
            throw new ZaloApiError.ZaloApiError("Missing sticker id");
        if (!Array.isArray(stickerIds))
            stickerIds = [stickerIds];
        if (stickerIds.length == 0)
            throw new ZaloApiError.ZaloApiError("Missing sticker id");
        const stickers = [];
        const tasks = stickerIds.map((stickerId) => getStickerDetail(stickerId));
        const tasksResult = await Promise.allSettled(tasks);
        tasksResult.forEach((result) => {
            if (result.status === "fulfilled")
                stickers.push(result.value);
        });
        return stickers;
    };
    async function getStickerDetail(stickerId) {
        const params = {
            sid: stickerId,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt message");
        const finalServiceUrl = new URL(serviceURL);
        finalServiceUrl.pathname = finalServiceUrl.pathname + "/sticker_detail";
        const response = await utils.request(utils.makeURL(finalServiceUrl.toString(), {
            params: encryptedParams,
        }));
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    }
}

exports.getStickersDetailFactory = getStickersDetailFactory;
