'use strict';

var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var utils = require('../utils.cjs');

function addUserToGroupFactory(serviceURL) {
    /**
     * Add user to existing group
     *
     * @param groupId Group ID
     * @param members User ID or list of user IDs to add
     *
     * @throws ZaloApiError
     */
    return async function addUserToGroup(groupId, members) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        if (!Array.isArray(members))
            members = [members];
        const params = {
            grid: groupId,
            members: members,
            membersTypes: members.map(() => -1),
            imei: context.appContext.imei,
            clientLang: context.appContext.language,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt params");
        const response = await utils.request(serviceURL, {
            method: "POST",
            body: new URLSearchParams({
                params: encryptedParams,
            }),
        });
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    };
}

exports.addUserToGroupFactory = addUserToGroupFactory;
