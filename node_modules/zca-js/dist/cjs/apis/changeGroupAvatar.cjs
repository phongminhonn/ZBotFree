'use strict';

var FormData = require('form-data');
var fs = require('node:fs');
var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var utils = require('../utils.cjs');

function changeGroupAvatarFactory(serviceURL) {
    /**
     * Change group avatar
     *
     * @param groupId Group ID
     * @param avatarPath Path to the image file
     *
     * @throws ZaloApiError
     */
    return async function changeGroupAvatar(groupId, avatarPath) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        const params = {
            grid: groupId,
            avatarSize: 120,
            clientId: `g${groupId}${utils.getFullTimeFromMilisecond(new Date().getTime())}`,
            imei: context.appContext.imei,
        };
        const imageMetaData = await utils.getImageMetaData(avatarPath);
        params.originWidth = imageMetaData.width || 1080;
        params.originHeight = imageMetaData.height || 1080;
        const formData = new FormData();
        formData.append("fileContent", fs.readFileSync(avatarPath), {
            filename: "blob",
            contentType: "image/jpeg",
        });
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt params");
        const response = await utils.request(serviceURL + `&params=${encodeURIComponent(encryptedParams)}`, {
            method: "POST",
            headers: formData.getHeaders(),
            body: formData.getBuffer(),
        });
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    };
}

exports.changeGroupAvatarFactory = changeGroupAvatarFactory;
