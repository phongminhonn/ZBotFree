'use strict';

var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var Reaction = require('../models/Reaction.cjs');
var utils = require('../utils.cjs');

function addReactionFactory(serviceURL) {
    /**
     * Add reaction to a message
     *
     * @param icon Reaction icon
     * @param message Message object to react to
     *
     * @throws ZaloApiError
     */
    return async function addReaction(icon, message) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        let rType, source;
        switch (icon) {
            case Reaction.Reactions.HAHA:
                rType = 0;
                source = 6;
                break;
            case Reaction.Reactions.LIKE:
                rType = 3;
                source = 6;
                break;
            case Reaction.Reactions.HEART:
                rType = 5;
                source = 6;
                break;
            case Reaction.Reactions.WOW:
                rType = 32;
                source = 6;
                break;
            case Reaction.Reactions.CRY:
                rType = 2;
                source = 6;
                break;
            case Reaction.Reactions.ANGRY:
                rType = 20;
                source = 6;
                break;
            default:
                rType = -1;
                source = 6;
        }
        const params = {
            react_list: [
                {
                    message: JSON.stringify({
                        rMsg: [
                            {
                                gMsgID: parseInt(message.data.msgId),
                                cMsgID: parseInt(message.data.cliMsgId),
                                msgType: 1,
                            },
                        ],
                        rIcon: icon,
                        rType,
                        source,
                    }),
                    clientId: Date.now(),
                },
            ],
            toid: message.threadId,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt message");
        const response = await utils.request(serviceURL, {
            method: "POST",
            body: new URLSearchParams({
                params: encryptedParams,
            }),
        });
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    };
}

exports.addReactionFactory = addReactionFactory;
