'use strict';

var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var utils = require('../utils.cjs');

function getStickersFactory(serviceURL) {
    /**
     * Get stickers by keyword
     *
     * @param keyword Keyword to search for
     * @returns Sticker IDs
     *
     * @throws ZaloApiError
     */
    return async function getStickers(keyword) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        if (!keyword)
            throw new ZaloApiError.ZaloApiError("Missing keyword");
        const params = {
            keyword: keyword,
            gif: 1,
            guggy: 0,
            imei: context.appContext.imei,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt message");
        const finalServiceUrl = new URL(serviceURL);
        finalServiceUrl.pathname = finalServiceUrl.pathname + "/suggest/stickers";
        const response = await utils.request(utils.makeURL(finalServiceUrl.toString(), {
            params: encryptedParams,
        }));
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        const suggestions = result.data;
        const stickerIds = [];
        // @TODO: Implement these
        // suggestions.sugg_guggy, suggestions.sugg_gif
        if (suggestions.sugg_sticker)
            suggestions.sugg_sticker.forEach((sticker) => stickerIds.push(sticker.sticker_id));
        return stickerIds;
    };
}

exports.getStickersFactory = getStickersFactory;
