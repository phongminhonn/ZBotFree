'use strict';

var context = require('../context.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');
var utils = require('../utils.cjs');

function findUserFactory(serviceURL) {
    /**
     * Find user by phone number
     *
     * @param phoneNumber Phone number
     *
     * @throws ZaloApiError
     */
    return async function findUser(phoneNumber) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        if (!phoneNumber)
            throw new ZaloApiError.ZaloApiError("Missing phoneNumber");
        if (phoneNumber.startsWith("0")) {
            if (context.appContext.language == "vi")
                phoneNumber = "84" + phoneNumber.slice(1);
        }
        const params = {
            phone: phoneNumber,
            avatar_size: 240,
            language: context.appContext.language,
            imei: context.appContext.imei,
            reqSrc: 40,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt message");
        const finalServiceUrl = new URL(serviceURL);
        finalServiceUrl.searchParams.append("params", encryptedParams);
        const response = await utils.request(utils.makeURL(finalServiceUrl.toString(), {
            params: encryptedParams,
        }));
        const result = await utils.handleZaloResponse(response);
        if (result.error && result.error.code != 216)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    };
}

exports.findUserFactory = findUserFactory;
