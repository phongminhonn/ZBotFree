'use strict';

var context = require('../context.cjs');
var Message = require('../models/Message.cjs');
var utils = require('../utils.cjs');
var ZaloApiError = require('../Errors/ZaloApiError.cjs');

function sendStickerFactory(api) {
    const directMessageServiceURL = utils.makeURL(`${api.zpwServiceMap.chat[0]}/api/message/sticker`, {
        zpw_ver: context.appContext.API_VERSION,
        zpw_type: context.appContext.API_TYPE,
    });
    const groupMessageServiceURL = utils.makeURL(`${api.zpwServiceMap.group[0]}/api/group/sticker`, {
        zpw_ver: context.appContext.API_VERSION,
        zpw_type: context.appContext.API_TYPE,
    });
    /**
     * Send a sticker to a thread
     *
     * @param sticker Sticker object
     * @param threadId group or user id
     * @param type Message type (DirectMessage or GroupMessage)
     *
     * @throws ZaloApiError
     */
    return async function sendSticker(sticker, threadId, type = Message.MessageType.DirectMessage) {
        if (!context.appContext.secretKey)
            throw new ZaloApiError.ZaloApiError("Secret key is not available");
        if (!context.appContext.imei)
            throw new ZaloApiError.ZaloApiError("IMEI is not available");
        if (!context.appContext.cookie)
            throw new ZaloApiError.ZaloApiError("Cookie is not available");
        if (!context.appContext.userAgent)
            throw new ZaloApiError.ZaloApiError("User agent is not available");
        if (!sticker)
            throw new ZaloApiError.ZaloApiError("Missing sticker");
        if (!threadId)
            throw new ZaloApiError.ZaloApiError("Missing threadId");
        if (!sticker.id)
            throw new ZaloApiError.ZaloApiError("Missing sticker id");
        if (!sticker.cateId)
            throw new ZaloApiError.ZaloApiError("Missing sticker cateId");
        if (!sticker.type)
            throw new ZaloApiError.ZaloApiError("Missing sticker type");
        const isGroupMessage = type === Message.MessageType.GroupMessage;
        const params = {
            stickerId: sticker.id,
            cateId: sticker.cateId,
            type: sticker.type,
            clientId: Date.now(),
            imei: context.appContext.imei,
            zsource: 101,
            toid: isGroupMessage ? undefined : threadId,
            grid: isGroupMessage ? threadId : undefined,
        };
        const encryptedParams = utils.encodeAES(context.appContext.secretKey, JSON.stringify(params));
        if (!encryptedParams)
            throw new ZaloApiError.ZaloApiError("Failed to encrypt message");
        const finalServiceUrl = new URL(isGroupMessage ? groupMessageServiceURL : directMessageServiceURL);
        finalServiceUrl.searchParams.append("nretry", "0");
        const response = await utils.request(finalServiceUrl.toString(), {
            method: "POST",
            body: new URLSearchParams({
                params: encryptedParams,
            }),
        });
        const result = await utils.handleZaloResponse(response);
        if (result.error)
            throw new ZaloApiError.ZaloApiError(result.error.message, result.error.code);
        return result.data;
    };
}

exports.sendStickerFactory = sendStickerFactory;
